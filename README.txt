TDD

1. 깨지는 상황을 만들어라
2. 그 상황이 통과시켜라
3. 그렇게 되도록 리텍토링해라.

red , green , refectoring


TDD는
테스트코드를 먼저만들고 실제 프로덕션 코드를 나중에 만드는 개발 방법을 말한다

기존에 설계 구조가
설계 > 개발(코드작성) > 테스트(코드작성) 이라면

설계 > 테스트(코드작성) > 개발(코드작성)
   (설계 수정)
의 형태가 된다

TDD 는 red , green blue 리팩터라는 개발사이클이있따
red: 테스트를 실패하고
green : 테스트를 성공할수 있게 프로덕션 코드를 구현한후
blue : Refactor, 프로덕션 코드와 테스트 코드를 리팩토링 

이렇게 TDD는 세가지 사이클로 이루어져 있습니다

왜 TDD를 사용해야할까
1.변화에 대한 두려움을 줄여준다(리팩토링이 편하다)
2.디버깅 시간을 줄여준다
3.동작하는 문서역할을 한다

TDD를 하면 자연스럽게 테스트 커버리지가 높아진다
나중에 테스트코드를 작성하면 하지않거나 잊어버릴수 있기떄문
미리 테스트부터 하면 커버리지가 높아진다

오버 엔지리어링 방지
정말 필요한 부분에 대해서만 개발을 하니 불필요한 구현을 하지 않을 수있따

설계에 대한 피드백이 빠르다
개발을 하고 잘못된점을 깨닫게되는 시기는 어딘가 변경이 되거나 사용하기 어려울때 깨달을수있다
이런점에서 TDD는 테스트시점에서 피드백을 빠르게 해줍니다.

TDD는 설계방법론이다?
TDD 는 높은 응집을 유도하지 않는다
TDD는 단일책임 원칙과 인터페이스 분리원칙 위배에 어던 신호도 주지 않는다
TDD는 인터페이스 일관성을 도출하지 않는다
TDD는 리팩토링 단계는 좋은 구조를 안내하거나 좋은 구조를 갖도록 강제하지 않는다.

이는 TDD가 설계방법론이 아니다라는걸 말해준다

TDD를 실패하는 사람이 하는 테스트
-코드가 이루고자하는 가치나 기능을 테스트하기보다 그 기능을 어떻게 구현하고 있는지를 테스트한다
-결국 테스트 케이스들이 구현체와 결합도가 높아진다
-구현체들을 리펙토링하면 결합되어있는 테스트 케이스들이 모두 꺠져버린다.

우리는 구현체가 아닌 인터페이스를 테스트해야한다
이렇게 인터페이스를 테스트하게 되면 내부에 구현되어있는 구현체를 아무리 리팩토링하더라도
테스트케이스는 인터페이스를 테스트하기 떄문에 테스트케이스는 깨지지 않습니다.


단위테스트
통합테스트 : 여러 작업 단위가 연계된 워크플로우를 테스트하기위한 수단(객체 간 , 서비스간 , 시스템간)
기능테스트 : 공개된 API의 가장 바깥쪽에 해당하는 코드 검사 (Controller 호출 , Security , http)
부하테스트 : 주어진 단위 시간동안 어플리케이션이 얼마나 많은 요청을 처리할 수 있는지 검사
인수테스트 : 고객 또는 대리인이 정의되어진 모든 목적에 부합되는지 확인해보고자 하는 검사

단위테스트
-가장 작은 단위의 테스트
-일반적으로 메서드 레벨
-검증이 필요한 코드에 대해 테스트 케이스를 작성하는 절차 또는 프로세스
-Unit Testing은 테스트코드가 목적 코드의 완전성을 입증 해주기 떄문에 , 테스트 코드 그 자체만으로 주요한 가치가 있음

단위테스트의 목적 
1.문제점발견 : 문제가 발생시 어느 부분이 잘못되었는지 재빨리 확인할 수 있게 해줍니다
따라서 프로그램 안정성이 높아집니다.
2. 변경이 쉽다 : 어떻게 코드를 고치더라도 문제점을 금방 파악할 수 있고
수정된 코드가 정확하게 동작하는지 쉽게 알 수 있게되므로 변경을 자주 할수있다
3. 품질 향상 : 하나의 단위테스트가 너무 길어지거나 복잡해지는것은 프로덕션 코드에서 잘못되었다고 생각할 수 있습니다.
하나의 테스트 메서드에서 너무 많은 기능을 수행하기 떄문에 이는 리팩토링이 필요하다는것을 바로 알수있겟다.
4. 문서화 : 일명 샘플코드 라고 하는데 예외상황 , 용도 , 의존관계를 한눈에 파악할수있다
또한 단위테스트는 배포되는 코드와 일치하므로 항상 최신상태로 유지된다는 이점도 있다

좋은 단위테스트
F I R S T
F Fast 빠르게
I Independent 독립적으로 ,테스트는 서로 의존하면 안된다
R Repeatable 반복 가능하게 , 테스트는 어떤 환경에서도 반복 가능해야한다
S Self-Validating 자가 검증하는 , 테스트는 Boolean값으로 결과를 내야하는대 성공과 실패로 판단해야하는데
그렇지 않다면 보는사람이 주관적으로 판단하게 되고 그러면 지루한 수작업 평가가 필요하게 된다
T Timely 적시에 테스트는 항상 적시에 작성해야한다
단위테스트는 테스트를 하려는 실제 코드를 구현하기 직전에 구현해야 합니다.
만약 실제코드를 구현한 다음 테스트코드를 만들게 되면 실제 코드가 테스트하기 어렵다는 사실을 
뒤늦게 발견할지도 모른다.




























